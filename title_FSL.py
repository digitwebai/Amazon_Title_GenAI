# -*- coding: utf-8 -*-
"""fewshot_learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SXRXUnfH3e182VXnu6__89ONvxVeNZET
"""


import openai
from typing import List, Dict
import pandas as pd
from jinja2 import Template
from typing import List, Dict

API_KEY = "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"


# Pricing for gpt-4o-mini (June 2024)
INPUT_COST_PER_1M = 0.06   # USD/1M
OUTPUT_COST_PER_1M = 2.40  # USD/1M


# Assign the API key to OpenAI
openai.api_key = API_KEY

# Test API connection with a simple chat request
try:
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",  # or "gpt-3.5-turbo" if gpt-4o is not available
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": "Hello, can you respond?"}
        ]
    )
    print("‚úÖ OpenAI client initialized successfully!")
    print("Response:", response['choices'][0]['message']['content'])

except Exception as e:
    print("‚ùå Failed to connect to OpenAI API:")
    print(e)



def create_prompt(old_title: str, description: str, examples: List[Dict] = None) -> str:
    """Create a few-shot prompt with examples using Jinja2 template"""

    template_string = """Generate Amazon product titles from descriptions. Follow these examples:

    {# Built-in few-shot examples #}
    {% set builtin_examples = [
      {
        'Bullet Points': 'Wireless Bluetooth headphones with active noise cancellation, 30-hour battery life, premium leather ear cushions, compatible with iPhone and Android devices, includes carrying case',
        'Title': 'Wireless Bluetooth Headphones with Active Noise Cancelling, 30H Battery Life, Premium Leather Cushions - Compatible iPhone Android with Carrying Case'
      },
      {
        'Bullet Points': 'Stainless steel water bottle, double wall vacuum insulated, keeps drinks cold 24 hours hot 12 hours, leak-proof design, 32 oz capacity, BPA free, available in multiple colors',
        'Title': 'Stainless Steel Water Bottle 32oz - Double Wall Vacuum Insulated, Keeps Cold 24H Hot 12H, Leak-Proof BPA Free'
      },
      {
        'Bullet Points': 'Gaming mechanical keyboard with RGB backlighting, blue switches, anti-ghosting technology, aluminum frame, detachable USB-C cable, compatible with PC Mac',
        'Title': 'Gaming Mechanical Keyboard RGB Backlit Blue Switches - Anti-Ghosting Aluminum Frame, Detachable USB-C Cable PC Mac Compatible'
      },
      {
        'Bullet Points': 'Yoga mat non-slip surface, eco-friendly TPE material, 6mm thick extra cushioning, lightweight portable design, includes carrying strap, 72 inch length',
        'Title': 'Yoga Mat Non-Slip 6mm Thick Extra Cushion - Eco-Friendly TPE Material 72" Lightweight Portable with Carrying Strap'
      },
      {
        'Bullet Points': 'Smart fitness tracker with heart rate monitor, sleep tracking, waterproof IP68 rating, 7-day battery life, step counter, smartphone notifications',
        'Title': 'Smart Fitness Tracker Heart Rate Monitor Sleep Tracking - Waterproof IP68, 7-Day Battery, Step Counter Smartphone Notifications'
      }
    ] %}

    {% for example in builtin_examples %}
    Example {{ loop.index }}:
    Description: {{ example['Bullet Points'] }}
    Title: {{ example['Title'] }}

    {% endfor %}

    {# Additional custom examples if provided #}
    {% if examples %}
    {% for example in examples[:5] %}
    Example {{ loop.index + builtin_examples|length }}:
    Description: {{ example['Bullet Points'] }}
    Title: {{ example['Title'] }}

    {% endfor %}
    {% endif %}

    Guidelines:
    - Keep titles under 200 characters, with critical keywords in the first 80 characters.
    - Include keywords from the {{ old_title }} that are missing in the description (MUST include within the first 80 characters if missing from the description).
    - Avoid brand names like Ledsone.
    - Must include the shape and pack details if available.
    - Avoid using synonyms (e.g., 'retro' and 'vintage' are synonyms).
    - The first 80 characters should provide a clear description of the product; avoid compatibility information.
    - Generate Amazon specific title considering above instructions.

    Now generate a title for:
    Description: {{ description }}
    Title:"""

    # Create the Jinja2 template object
    template = Template(template_string)

    # Render the template with variables
    prompt = template.render(
        old_title=old_title or '',
        description=description or '',
        examples=examples or []
    )

    return prompt

# Test function to verify it works
def test_create_prompt():
    """Test the new create_prompt function"""

    # Test data
    old_title = "LED Strip Lights RGB 16ft with Remote"
    description = "Flexible LED strip with color changing capabilities and adhesive backing"
    custom_examples = [
        {
            'Bullet Points': 'USB charging cable 6 feet long, fast charging, compatible with multiple devices',
            'Title': 'USB Charging Cable 6ft Fast Charging - Compatible Multiple Devices'
        }
    ]

    # Generate prompt
    prompt = create_prompt(old_title, description, custom_examples)

    print("Generated Prompt:")
    print("=" * 50)
    print(prompt)
    print("=" * 50)

    return prompt


def generate_title(old_title: str, description: str, temperature: float = 1) -> str:
    """Generate a single title for a given product description"""
    SAMPLE_EXAMPLES = None
    try:
        prompt = create_prompt(old_title, description, SAMPLE_EXAMPLES)

        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # You can use "gpt-3.5-turbo" if gpt-4o is unavailable
            messages=[
                {
                    "role": "system",
                    "content": "You are an expert at creating compelling Amazon product titles that drive sales and improve search visibility."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=temperature,
            max_tokens=100,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        title = response.choices[0].message.content.strip()

        # Track input and output tokens
        input_tokens = response['usage']['total_tokens'] - response['usage']['completion_tokens']
        output_tokens = response['usage']['completion_tokens']
        total_tokens = response['usage']['total_tokens']

        cost = (
        (input_tokens / 1000000) * INPUT_COST_PER_1M +
        (output_tokens / 1000000) * OUTPUT_COST_PER_1M
        )


        print(f"Input Tokens: {input_tokens}, Output Tokens: {output_tokens}, Total Tokens: {total_tokens}")
        print(f"Cost: {cost} USD")
        return title, cost

    except Exception as e:
        print(f"‚ùå Error generating title: {e}")
        return None

if __name__ == "__main__":
  excel_file = 'data\Amazon_Competitors.xlsx'
  test_file = 'data\Amazon_Data.xlsx'
  test_title= "LEDSone Industrial 3 Way Vintage Retro Style Steampunk Pipe Light Bar with Lamp Shade Pendant Light Fitting Metal Pipe Lighting Ceiling Light UK (Brushed Silver)"

  # Read the Excel file (first sheet by default)
  df = pd.read_excel(excel_file, sheet_name=0) #0=BULB
  df_test = pd.read_excel(test_file, sheet_name=2) #0=title

  new_df = df[['Title', 'Bullet Points']]

  # Convert the DataFrame to a list of dictionaries
  data_list = new_df.to_dict(orient='records')

  # Create an empty DataFrame with specified columns
  df_result = pd.DataFrame(columns=['old_title', 'bullet points', 'new_title', 'cost'])

  
  for i in range(len(df_test)):
      print(i)
      test_title = df_test['Title '][i]
      test_description = df_test['Bullet Points'][i]

      print("üîÑ Generating title for:")
      print(f"Description: {test_description}")
      print("\n" + "="*60)

      #
      title , cost = generate_title(old_title=test_title, description=test_description)
      print("\n" + "="*60)
      print(f"‚úÖ Generated Title: {title}")
      print(f"Original Title: {test_title}")
      print(f"Cost: {cost} USD")

      new_rows = pd.DataFrame({
      'old_title': [test_title],
      'bullet points': [test_description],
      'new_title': [title],
      'cost': [cost]
        })

      df_result = pd.concat([df_result, new_rows], ignore_index=True)


  filename="output\\results.xlsx"
  df_result.to_excel(filename, index=False)

